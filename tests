import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.junit.jupiter.MockitoExtension
import org.springframework.mock.web.MockMultipartFile
import org.springframework.web.multipart.MultipartFile
import java.io.IOException
import java.nio.file.FileAlreadyExistsException
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Path
import java.time.LocalDate
import java.util.*
import javax.servlet.http.HttpServletRequest
import org.junit.jupiter.api.Assertions.*
import org.mockito.Mockito.`when` as mockWhen

@ExtendWith(MockitoExtension::class)
class ClientDocumentsServiceTest {

    @Mock
    private lateinit var fileStorageProperties: FileStorageProperties

    @Mock
    private lateinit var repository: ClientDocuementRepository

    @Mock
    private lateinit var masterServiceClient: MasterServiceClient

    @InjectMocks
    private lateinit var clientDocumentsService: ClientDocumentsService

    @Test
    fun storeFile_ValidFile_Success() {
        // Arrange
        val file: MultipartFile = MockMultipartFile("test.txt", "Test file content".toByteArray())

        // Act
        val fileName = clientDocumentsService.storeFile(file)

        // Assert
        assertNotNull(fileName)
        assertEquals("test.txt", fileName)
    }

    @Test
    fun storeFile_InvalidFileName_ExceptionThrown() {
        // Arrange
        val file: MultipartFile = MockMultipartFile("test.invalid.txt", "Test file content".toByteArray())

        // Act & Assert
        assertThrows(FileStorageException::class.java) { clientDocumentsService.storeFile(file) }
    }

    @Test
    fun downloadFile_ValidId_Success() {
        // Arrange
        val id: Long = 1L
        val request = mock(HttpServletRequest::class.java)
        val data = ClientDocument()
        data.fileName = "test.txt"
        mockWhen(repository.findById(id)).thenReturn(Optional.of(data))

        // Act
        val response = clientDocumentsService.downloadFile(id, request)

        // Assert
        assertNotNull(response)
        assertEquals(HttpStatus.OK, response.statusCode)
        assertNotNull(response.body)
    }

    @Test
    fun downloadFile_InvalidId_ExceptionThrown() {
        // Arrange
        val id: Long = 1L
        val request = mock(HttpServletRequest::class.java)
        mockWhen(repository.findById(id)).thenReturn(Optional.empty())

        // Act & Assert
        assertThrows(MyFileNotFoundException::class.java) { clientDocumentsService.downloadFile(id, request) }
    }

    @Test
    fun loadFileAsResource_ValidFileName_Success() {
        // Arrange
        val fileName = "test.txt"
        val filePath: Path = FileSystems.getDefault().getPath(fileName)
        Files.createFile(filePath)
        mockWhen(fileStorageProperties.uploadDir).thenReturn(".")
        
        // Act
        val resource = clientDocumentsService.loadFileAsResource(fileName)

        // Assert
        assertNotNull(resource)
        assertTrue(resource.exists())

        // Clean up
        Files.deleteIfExists(filePath)
    }

    @Test
    fun loadFileAsResource_InvalidFileName_ExceptionThrown() {
        // Arrange
        val fileName = "invalid.txt"

        // Act & Assert
        assertThrows(MyFileNotFoundException::class.java) { clientDocumentsService.loadFileAsResource(fileName) }
    }

    @Test
    fun updateClientDocumentsValidity_ValidId_ValidDto_Success() {
        // Arrange
        val id: Long = 1L
        val dto = UpdateCommandDto()
        dto.validUntil = LocalDate.now()
        dto.expiryOnNotice = false
        dto.archiveDocument = true
        val document = ClientDocument()
        mockWhen(repository.findById(id)).thenReturn(Optional.of(document))

        // Act
        clientDocumentsService.updateClientDocumentsValidity(id, dto)

        // Assert
        assertNotNull(document.validUntil)
        assertEquals(dto.validUntil, document.validUntil)
        assertEquals(dto.expiryOnNotice, document.expiryOnNotice)
        assertEquals(dto.archiveDocument, document.archiveDocument)
    }

    @Test
    fun updateClientDocumentsValidity_InvalidId_ExceptionThrown() {
        // Arrange
        val id: Long = 1L
        val dto = UpdateCommandDto()
        dto.validUntil = LocalDate.now()

        // Act & Assert
        assertThrows(NoSuchElementException::class.java) { clientDocumentsService.updateClientDocumentsValidity(id, dto) }
    }

    // Add more test cases for the remaining methods if needed

}
